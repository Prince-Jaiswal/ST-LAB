1.ATM
import java.util.*;
class Check{
int checkPin(int p,int i){
if(p==i)
return 1;
System.out.println("Invalid PIN number");
return 0;
}
int checkAccount(int t){
if(t==1){
System.out.println("Opened Savings account");
return 1;
}
else if(t==1){
System.out.println("Opened Current account");
return 1;
}
else{
System.out.println("Invalid Account Type");
return 0;
}
}
void checkBal(int bal){
System.out.println("Your available balance is="+bal);
}
int withdraw(int a,int b){
if(a>b){
System.out.println("Insuffecient funds");
return 0;
}
b=b-a;
System.out.println("Successful transaction");
checkBal(b);
return b;
}
int deposit(int a,int b){
b=b+a;
System.out.println("Successful transaction");
checkBal(b);
return b;
}
}
public class ATM {
public static void main(String[] args) {
// TODO Auto-generated method stub
Scanner sc=new Scanner(System.in);
Check obj=new Check();
int r,pass=5555,k=0,balance=5000;
int inp;
while(k<3){
System.out.println("Enter PIN number");
inp=sc.nextInt();
r=obj.checkPin(pass,inp);
if(r==1){
System.out.println("\nWelcome\n");
break;
}
k++;
}
if(k==3){
System.out.println("Ttransaction Terminated");
System.exit(0);
}
r=0;
while(r==0){
System.out.println("Enter the account type\n1-Savings\n2-Current\n");
int type=sc.nextInt();
r=obj.checkAccount(type);
}
int trans=0;
while(trans!=4){
System.out.println("Select transaction:\n\n1-Check Balance\n2-Withdraw\n3-Deposit\n4-Exit\n");
trans=sc.nextInt();
switch(trans){
case 1:
obj.checkBal(balance);
break;
case 2:
System.out.println("Enter the amount you want to withdraw");
int amt=sc.nextInt();
if(amt%500!=0){
System.out.println("Invalid amount");
}
else{
r=obj.withdraw(amt,balance);
balance=r;
};
break;
case 3:
System.out.println("Enter the amount you want to deposit");
int amt2=sc.nextInt();
int b=obj.deposit(amt2,balance);
balance=b;
break;
}
}
}

}

2.tRIANGLE
import java.util.Scanner;
public class triangle {
public static void main(String[] args){
Scanner s=new Scanner(System.in);
int O=1;
do{
System.out.println("Enter 3 inputs which are the sides of a triangle");
int a=s.nextInt();
int b=s.nextInt();
int c=s.nextInt();
if(a<=200 && b<=200 && c<=200 && a>=1 && b>=1 && c>=1)
{
if(a<b+c && b<a+c && c<a+b){
if(a==b && b==c)
{
System.out.println("It is an equilateral triangle\n");
}
else if(a==b||b==c||c==a)
{
System.out.println("It is an isoceles triangle\n");
}
else
{
System.out.println("It is a scalene triangle\n");
}
}
else
System.out.println("It is not a triangle\n");
}
else
System.out.println("Invalid input\nEnter sides within the range 1-
200\n");
System.out.println("1. To enter input\n 2.to exit\nEnter your choice ");
O=s.nextInt();
}while(O!=2);
s.close();
}
}

3.BVA FOR NEXT DATE

import java.util.*;
public class Next {
public String nextd(int day,int month, int year) {
if((month>12)||((year<1812)||(year>2020))||(day>31))
{
return("Enter valid dates");
} 
else
{
if((day==31 && month%2!=1 && month<8)||(day==31 && month>7 && 
month%2==1))
{
return("Enter valid dates");
}
else
{
if((month%2==1)||((month>7)&&(month%2==0)))
{
if(day==31)
{
if(month==12){
day=1;
month=1;
year+=1;
}
else
{
day=1;
month+=1;
}
}
else
{
day+=1;
}
}
else
{
if(month==2 && day==28)
{
if((year%4==0 && year%100!=0)||(year%400==0))
{
day+=1;
}
else
{
month+=1;
day=1;
}
}
else if(day==30)
{
if(month==12){
day=1;
month=1;
year+=1;
}
else
{
day=1;
month+=1;
}
}
else
{
day+=1;
}
}
}
}
return(day+"/"+month+"/"+year);
}
}
 junit-
*Normal BVA
import static org.junit.Assert.*;
import org.junit.Test;
public class Normalbva {
@Test
public void test1() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,3,1812),"13/3/1812");
}
@Test
public void test2() 
{
Next d1 = new Next();
assertEquals(d1.nextd(30,3,1813),"31/3/1813");
}
@Test
public void test3() {
Next d1 = new Next();
assertEquals(d1.nextd(31,12,1912),"1/1/1913");
}
@Test
public void test4() {
Next d1 = new Next();
assertEquals(d1.nextd(12,3,2019),"13/3/2019");
}
@Test
public void test5() {
Next d1 = new Next();
assertEquals(d1.nextd(12,3,2020),"13/3/2020");
}
@Test
public void test6() {
Next d1 = new Next();
assertEquals(d1.nextd(15,1,2020),"16/1/2020");
}
@Test
public void test7() {
Next d1 = new Next();
assertEquals(d1.nextd(15,2,2020),"16/2/2020");
}
@Test
public void test8() {
Next d1 = new Next();
assertEquals(d1.nextd(15,11,2020),"16/11/2020");
}
@Test
public void test9() {
Next d1 = new Next();
assertEquals(d1.nextd(15,12,2020),"16/12/2020");
}
@Test
public void test10() {
Next d1 = new Next();
assertEquals(d1.nextd(15,6,2020),"16/6/2020");
}
@Test
public void test11() {
Next d1 = new Next();
assertEquals(d1.nextd(1,6,2020),"2/6/2020");
}
@Test
public void test12() 
{
Next d1 = new Next();
assertEquals(d1.nextd(2,6,2020),"3/6/2020");
}
@Test
public void test13() 
{
Next d1 = new Next();
assertEquals(d1.nextd(15,6,2020),"16/6/2020");
}
@Test
public void test14() 
{
Next d1 = new Next();
assertEquals(d1.nextd(30,6,2020),"1/7/2020");
}
@Test
public void test15() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,3,2020),"1/4/2020");
}
}
*Robust BVA
import static org.junit.Assert.*;
import org.junit.Test;
public class robustbva {
@Test
public void test() 
{
Next d1 = new Next();
assertEquals(d1.nextd(25,3,2019),"26/3/2019");
}
@Test
public void test1() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,3,1950),"13/3/1950");
}
@Test
public void test3() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,1915),"1/1/1916");
}
@Test
public void test6() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,3,1915),"13/3/1915");
}
@Test
public void test4() 
{
Next d1 = new Next();
assertEquals(d1.nextd(32,3,1914),"Enter valid dates");
}
@Test
public void test5() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,13,2021),"Enter valid dates");
}
@Test
public void test7() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,3,2020),"13/3/2020");
}
}
*Worst-case BVA
import static org.junit.Assert.*;
import org.junit.Test;
public class worstcase {
@Test
public void test() 
{
Next d1 = new Next();
assertEquals(d1.nextd(25,3,2012),"26/3/2012");
}
@Test
public void test1() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,3,1925),"13/3/1925");
}
@Test
public void test2() 
{
Next d1 = new Next();
assertEquals(d1.nextd(30,3,1950),"31/3/1950");
}
@Test
public void test3() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,2010),"1/1/2011");
}
public void test4() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,2010),"1/1/2010");
}
public void test5() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,2010),"1/1/2010");
}
@Test
public void test6() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,3,1915),"13/3/1915");
}
@Test
public void test7() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,3,1920),"13/3/1920");
}
@Test
public void test8() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,2009),"1/1/2010");
}
@Test
public void test9() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,2000),"1/1/2001");
}
}
*Robust worst-case BVA
import static org.junit.Assert.*;
import org.junit.Test;
public class robustworstcase {
@Test
public void test() 
{
Next d1 = new Next();
assertEquals(d1.nextd(25,3,2012),"26/3/2012");
}
@Test
public void test1() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,3,1925),"13/3/1925");
}
@Test
public void test2() 
{
Next d1 = new Next();
assertEquals(d1.nextd(30,3,1950),"31/3/1950");
}
@Test
public void test3() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,2010),"1/1/2011");
}
public void test4() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,2010),"1/1/2010");
}
public void test5() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,2010),"1/1/2010");
}
@Test
public void test6() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,3,1915),"13/3/1915");
}
@Test
public void test7() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,3,1920),"13/3/1920");
}
@Test
public void test8() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,2009),"1/1/2010");
}
@Test
public void test9() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,2000),"1/1/2001");
}
public void test12() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,2019),"1/1/2020");
}
@Test
public void test13() 
{
Next d1 = new Next();
assertEquals(d1.nextd(31,12,1999),"1/1/2000");
}
@Test
public void test10() 
{
Next d1 = new Next();
assertEquals(d1.nextd(32,3,1914),"Enter valid dates");
}
@Test
public void test11() 
{
Next d1 = new Next();
assertEquals(d1.nextd(12,13,2021),"Enter valid dates");
}
}

4.ect for next date

package nd2;
//import java.util.Scanner;
public class nextdate
{
public static String next(int d, int m, int y, int cc)
{
if(d==cc)
{
d=1;
if(m==12)
{
y++;
m=1;
}
else
{
m++;
}
}
else
{
d++;
}
return(String.valueOf(d)+"/"+String.valueOf(m)+"/"+String.valueOf(y));
}
public String nextday(int d, int m, int y)
{
if(d>=1 && d<=31 && m>=1 && m<=12 && y>=1812 && y<=2012)
{
switch(m)
{
case 1: 
case 3:return(next(d,m,y,31));
case 5:return(next(d,m,y,31));
case 7:return(next(d,m,y,31));
case 8:return(next(d,m,y,31));
case 10:return(next(d,m,y,31));
case 12: return(next(d,m,y,31));
case 4: return(next(d,m,y,30));
case 6: return(next(d,m,y,30));
case 9: return(next(d,m,y,30));
case 11: return(next(d,m,y,30));
default: return(next(d,m,y,((y%4==0 && y%100!=0) || y%400==0)?29:28));
}
}
return "Invalid Values";
}
}

junit-

package nd2;
import static org.junit.Assert.*;
import org.junit.Test;
public class equind2pgm {
//weak and strong normal test case
@Test
public void test_1() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(15,6,1912),"16/6/1912");
}
@Test
public void test_2() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(10,6,1912),"11/6/1912");
}
@Test
public void test_3() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(10,6,1900),"11/6/1900");
}
@Test
public void test_4() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(10,5,1912),"11/5/1912");
}
@Test
public void test_5() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(20,10,2010),"21/10/2010");
} 
//weak robust test cases
@Test
public void test3() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(-1,10,1912),"Invalid Values");
}
@Test
public void test31() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(12,7,1912),"13/7/1912");
}
@Test
public void test32() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(12,8,1912),"13/8/1912");
}
@Test
public void test33() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(12,4,1912),"13/4/1912");
}
@Test
public void test34() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(12,9,1912),"13/9/1912");
}
@Test
public void test35() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(12,1,1912),"13/1/1912");
}
@Test
public void test36() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(12,2,1912),"13/2/1912");
}
@Test
public void test37() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(12,3,1912),"13/3/1912");
}
@Test
public void test30() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(10,3,1912),"11/3/1912");
}
@Test
public void test4() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(15,13,1912),"Invalid Values");
}
@Test
public void test5() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(1,6,2200),"Invalid Values");
}
@Test
public void test6() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(32,6,1912),"Invalid Values");
}
@Test
public void test7() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(15,6,1811),"Invalid Values");
}
@Test
public void test8() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(15,6,2013),"Invalid Values");
}
//strong robust test cases
@Test
public void test9() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(2,1,1912),"3/1/1912");
}
@Test
public void test10() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(-1,3,1900),"Invalid Values");
}
@Test
public void test11() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(15,0,1811),"Invalid Values");
}
@Test
public void test12() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(33,12,1912),"Invalid Values");
}
@Test
public void test13() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(15,-1,-1),"Invalid Values");
}
@Test
public void test14() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(-1,6,-1),"Invalid Values");
}
@Test
public void test15() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(-1,-1,-1),"Invalid Values");
}
@Test
public void test16() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(31,12,2010),"1/1/2011");
}
@Test
public void test17() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(30,11,2010),"1/12/2010");
}
//////leap
@Test
public void test18() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(3,2,2010),"4/2/2010");
}
@Test
public void test19() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(28,2,2010),"1/3/2010");
}
@Test
public void test20() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(20,2,2008),"21/2/2008");
}
@Test
public void test21() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(29,2,2000),"1/3/2000");
}
@Test
public void test22() 
{
nextdate ob1=new nextdate();
assertEquals(ob1.nextday(28,2,1900),"1/3/1900");
}
}

5.Triangle using ecleema

package cs067;
public class triangle {
public String op(int a,int b,int c)
{
if(a>=1 && a<=200 && b>=1 && b<=200 && c>=1 && c<=200)
{
if(a+b>c && b+c>a && c+a>b)
{
if(a==b && b==c)
{
return "Equilateral Triangle";
}
else if(a==b||b==c)
{
return "Isosceles Triangle";
}
else
{
return "Scalen Triangle";
}
}
else
{
return "Not a Triangle";
}
}
else
{
return "Invalid";
}
}
}

junit-
package cs067;
import static org.junit.Assert.*;
import org.junit.Test;
import cs067.triangle;
public class triangleTest {
@Test
public void test() {
triangle t1=new triangle();
assertEquals(t1.op(1, 2, 3),"Not a Triangle");
}
@Test
public void test12() {
triangle t1=new triangle();
assertEquals(t1.op(2, 1, 1),"Not a Triangle");
}
@Test
public void test13() {
triangle t1=new triangle();
assertEquals(t1.op(2, 4, 2),"Not a Triangle");
}
@Test
public void test1() {
triangle t1=new triangle();
assertEquals(t1.op(100, 100, 100),"Equilateral Triangle");
}
@Test
public void test2() {
triangle t1=new triangle();
assertEquals(t1.op(4, 5, 6),"Scalen Triangle");
}
@Test
public void test3() {
triangle t1=new triangle();
assertEquals(t1.op(4, 6, 6),"Isosceles Triangle");
}
@Test
public void test4() {
triangle t1=new triangle();
assertEquals(t1.op(201, 201, 201),"Invalid");
}
@Test
public void test5() {
triangle t1=new triangle();
assertEquals(t1.op(6, 6, 4),"Isosceles Triangle");
}
@Test
public void test6() {
triangle t1=new triangle();
assertEquals(t1.op(4, 201, 7),"Invalid");
}
@Test
public void test7() {
triangle t1=new triangle();
assertEquals(t1.op(4, 7, 201),"Invalid");
}
@Test
public void test8() {
triangle t1=new triangle();
assertEquals(t1.op(0, 7, 201),"Invalid");
}
@Test
public void test9() {
triangle t1=new triangle();
assertEquals(t1.op(7, 0, 201),"Invalid");
}
@Test
public void test11() {
triangle t1=new triangle();
assertEquals(t1.op(7, 9, 0),"Invalid");
}
}

6.nextdate using ecleema

public class nextdate {
public static String next(int d,int m,int y,int cc){
if(d==cc){
d=1;
if(m==12){
y++;
m=1;
}
else{
m++;
}
}
else {
d++;
}
return(String.valueOf(d)+"/"+String.valueOf(m)+"/"+String.valueOf(y));
}
public String nextday(int d,int m,int y){
if(d>=1 && d<=31 && m>=1 && m<=12 && y>=1812 && y<=2012){
switch(m){
case 1:
case 3:
case 5:
case 8:
case 10:
case 12:return(next(d,m,y,31));
case 4:
case 6:
case 9:
case 11:return(next(d,m,y,30));
default:return(next(d,m,y,((y%4==0 && y%100!=0) || y%400==0)?29:28));
}
}
return "Invalid inputs";
}
}

junit-

import static org.junit.Assert.*;
import org.junit.Test;
public class test {
//weak and strong normal test cases
@Test
public void test1() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(15,3,1912),"16/3/1912");
}
@Test
public void test2() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(15,4,1912),"16/4/1912");
}
@Test
public void test3() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(16,4,1912),"17/4/1912");
}
@Test
public void test4() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(15,3,1912),"16/3/1912");
}
@Test
public void test5() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(10,11,1920),"11/11/1920");
}
@Test
public void test6() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(13,15,1912),"Invalid inputs");
}
@Test
public void test7() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(32,1,1813),"Invalid inputs");
}
@Test
public void test8() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(7,1,1810),"Invalid inputs");
}
@Test
public void test9() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(7,10,1912),"8/10/1912");
}
@Test
public void test10() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(6,11,2011),"7/11/2011");
}
@Test
public void test11() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(18,8,2012),"19/8/2012");
}
@Test
public void test12() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(-1,15,1912),"Invalid inputs");
}
@Test
public void test13() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(6,-1,1810),"Invalid inputs");
}
@Test
public void test14() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(32,10,1811),"Invalid inputs");
}
@Test
public void test15() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(1,2,1912),"2/2/1912");
}
@Test
public void test16() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(5,6,2000),"6/6/2000");
}
@Test
public void test17() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(21,6,2000),"22/6/2000");
}
@Test
public void test18() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(-1,-1,-1),"Invalid inputs");
}
@Test
public void test19() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(31,1,2001),"1/2/2001");
}
@Test
public void test20() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(31,12,2001),"1/1/2002");
}
@Test
public void test21() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(0,0,2013),"Invalid inputs");
}
@Test
public void test22() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(28,2,2011),"1/3/2011");
}
@Test
public void test23() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(28,13,2012),"Invalid inputs");
}
@Test
public void test24() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(28,2,2012),"29/2/2012");
}
@Test
public void test25() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(28,2,2000),"29/2/2000");
}
@Test
public void test26() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(31,1,1812),"1/2/1812");
}
@Test
public void test27() 
{
nextdate d1 = new nextdate();
assertEquals(d1.nextday(31,12,2012),"1/1/2013");
}
}

7.step
TC’S #1: Manual Steps:
• Open (Example: Type www.google.com)
• Type “Software Te sting” in the Google Search Input Box
• Click outside on an empty spot
• Click Search Button
• Verify the Text Present as “Software Testing”
• Assert the Title as “Software Testing”
• Save the test case with .HTML Extension.

8.login

import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;
public class Demo1 {
public static void main(String[] args)
{
System.setProperty("webdriver.chrome.driver", 
 C:\\Users\\User\\Downloads\\chromedriver.exe");
ChromeDriver driver = new ChromeDriver();
 driver.get("http://www.newtours.demoaut.com"); 
 driver.manage().window().maximize();
driver.findElement(By.name("userName")).sendKeys("mercury");
driver.findElement(By.name("password")).sendKeys("mercury");
driver.findElement(By.name("login")).click();
}
 }

9.total no.of links

package ex9;
import org.openqa.selenium.By;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.WebElement;
import java.util.List;
public class links {
public static void main(String[] args){
System.setProperty("webdriver.chrome.driver","C:\\Users\\Student\\Downloads\\chromedriver_win32 
(1)\\chromedriver.exe");
ChromeDriver d=new ChromeDriver();
d.get("C:\\Users\\Student\\Desktop\\image.html");
List <WebElement> a=d.findElements(By.xpath("//select"));
int linkcount=a.size();
System.out.println("total no of links ="+linkcount);
List <WebElement> b=d.findElements(By.xpath("//*"));
int elements=b.size();
System.out.println("total no of elements ="+elements);
}
}

10.title n url

package progten;
import org.openqa.selenium.chrome.ChromeDriver;
public class ANIKET_1NH18CS067{
public static void main(String[] args) {
System.setProperty("webdriver.chrome.driver","C:\\\\Users\\\\Student\\\\Desktop\\\\Jar\\\\chromedriver.ex
e");
ChromeDriver driver = new ChromeDriver();
driver.get("https://en.wikipedia.org/wiki/Wikipedia");
driver.manage().window().maximize();
driver.findElementById("pt-login").click();
String str=driver.getCurrentUrl();
System.out.println("Url of current webpage is '"+str+"'");
if(str.equals("https://en.wikipedia.org/w/index.php?title=Special:UserLogin&returnto=Wikipedia"))
System.out.println(true);
else
System.out.println(false);
ChromeDriver d = new ChromeDriver();
d.get("C:\\Users\\Student\\Desktop\\login.html");
d.manage().window().maximize();
String s=d.getTitle();
System.out.println("Title of current webpage is '"+s+"'");
if(s.equals("LOGIN"))
System.out.println(true);
else
System.out.println(false);
}
}

11.dropdown

package seledriver;
import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;
public class dropdown3 {
 public static void main(String[] args) throws InterruptedException {
 
 //pgm 11_Write a test program to demonstrate selecting and 
 //deselecting option from multi select dropdown
 //Creating instance of Chrome driver
 System.setProperty("webdriver.chrome.driver", 
 "D:\\Software\\Eclipse&JAR\\Jar\\chromedriver_win32\\chromedriver.exe");
 WebDriver driver = new ChromeDriver();
 // Navigate to the URL
 driver.get("https://demoqa.com/select-menu");
 //driver.get("file:///D:/NHCE/academic%20files/Academic%20files%20ODD%2021-
22/ST/st%20lab/LAB-Checked/dropdown.html");
 //Maximizing window
 driver.manage().window().maximize();
//Selecting the multi-select element by locating its id
 Select select = new Select(driver.findElement(By.id("cars")));
 //Get the list of all the options
 System.out.println("The dropdown options are -");
 List<WebElement> options = select.getOptions();
 for(WebElement option: options)
 System.out.println(option.getText());
 //Using isMultiple() method to verify if the element is multi-select, 
 //if yes go onto next steps else exit
 if(select.isMultiple()){
 //Selecting option as 'Opel'-- ByIndex
 System.out.println("Select option Opel by Index");
 select.selectByIndex(2);
 Thread.sleep(5000);
 //Selecting the option as 'Saab'-- ByValue
 System.out.println("Select option saab by Value");
 select.selectByValue("saab");
 Thread.sleep(5000);
 // Selecting the option by text
 System.out.println("Select option Audi by Text");
 select.selectByVisibleText("Audi");
 Thread.sleep(5000);
 //Get the list of selected options
 System.out.println("The selected values in the dropdown options are -");
 List<WebElement> selectedOptions = select.getAllSelectedOptions();
 for(WebElement selectedOption: selectedOptions)
 System.out.println(selectedOption.getText());
 // Deselect the value "Audi" by Index
 System.out.println("DeSelect option Audi by Index");
 select.deselectByIndex(3);
 Thread.sleep(10000);
 //Deselect the value "Opel" by visible text
 System.out.println("Select option Opel by Text");
 select.deselectByVisibleText("Opel");
 //Thread.sleep(10000);
 //Validate that both the values are deselected
 System.out.println("The selected values after deselect in the dropdown options are -");
 List<WebElement> selectedOptionsAfterDeselect = select.getAllSelectedOptions();
for(WebElement selectedOptionAfterDeselect: selectedOptionsAfterDeselect)
 System.out.println(selectedOptionAfterDeselect.getText());
 //Step#8- Deselect all values
 select.deselectAll();
 }
 driver.quit();
 }
}

12.implicit

package seledriver;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
//import org.testng.annotations.Test;
public class Implicit12_final {
public static void main(String[] args) throws InterruptedException {
System.setProperty ("webdriver.chrome.driver",
"D:\\Software\\Eclipse&JAR\\Jar\\chromedriver_win32\\chromedriver.exe" 
);
ChromeDriver driver = new ChromeDriver();
driver.manage().timeouts().implicitlyWait(10,TimeUnit.MINUTES) ;
String eTitle = "Demo Guru99 Page";
String aTitle = "" ;
// launch Chrome and redirect it to the Base URL
driver.get("http://demo.guru99.com/test/guru99home/" );
//Maximizes the browser window
driver.manage().window().maximize() ;
//get the actual value of the title
aTitle = driver.getTitle();
//compare the actual title with the expected title
if (aTitle.equals(eTitle))
{
System.out.println( "Test Passed") ;
}
else {
System.out.println( "Test Failed" );
}
//close browser
driver.close();
}
}

explicit

Package seledriver;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
public class Explicit12_final {
public static void main(String[] args) throws InterruptedException {
System.setProperty ("webdriver.chrome.driver",
"D:\\Software\\Eclipse&JAR\\Jar\\chromedriver_win32\\chromedriver.exe" );
ChromeDriver driver = new ChromeDriver();
WebDriverWait wait=new WebDriverWait(driver, 10);
String eTitle = "Demo Guru99 Page";
String aTitle = "" ;
// launch Chrome and redirect it to the Base URL
driver.get("http://demo.guru99.com/test/guru99home/" );
//Maximizes the browser window
driver.manage().window().maximize() ;
//get the actual value of the title
aTitle = driver.getTitle();
//compare the actual title with the expected title
if (aTitle.contentEquals(eTitle))
{
System.out.println( "Test Passed") ;
}
else {
System.out.println( "Test Failed" );
}
//driver.close();
WebElement guru99=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath( 
"//a")));
guru99.click();
}
}



